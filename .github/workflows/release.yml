name: Release

on:
  push:
    tags:
      - '*'

jobs:
  # Produces configuration values as outputs that the build and release jobs use
  conf:
    name: Configuration
    runs-on: ubuntu-latest
    outputs:
      name: ${{ steps.name.outputs.value }}
      version: ${{ steps.version.outputs.value }}
      linux_artifact: ${{ steps.artifacts.outputs.linux }}
      macos_artifact: ${{ steps.artifacts.outputs.macos }}
      windows_artifact: ${{ steps.artifacts.outputs.windows }}
    steps:
      - uses: actions/checkout@v2

      - name: Get project name from Cargo.toml
        id: name
        run: echo ::set-output name=value::$(grep -m 1 'name = ' Cargo.toml | sed 's/name = "\(.*\)"/\1/')

      - name: Get version from git tag
        id: version
        run: echo ::set-output name=value::${GITHUB_REF#refs/tags/}

      - name: Store names for built artifacts
        id: artifacts
        run: |
          echo ::set-output name=linux::${{ steps.name.outputs.value }}-linux-${{ steps.version.outputs.value }}.tar
          echo ::set-output name=macos::${{ steps.name.outputs.value }}-macos-${{ steps.version.outputs.value }}.tar
          echo ::set-output name=windows::${{ steps.name.outputs.value }}-windows-${{ steps.version.outputs.value }}.zip

  # Uses a matrix to build the project for all platforms and upload the
  # artifacts
  build:
    name: Build
    needs:
      - conf
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        include:
          - os: ubuntu-latest
            binary: ${{ needs.conf.outputs.name }}
            artifact: ${{ needs.conf.outputs.linux_artifact }}
            strip: true
          - os: macos-latest
            binary: ${{ needs.conf.outputs.name }}
            artifact: ${{ needs.conf.outputs.macos_artifact }}
            strip: true
          - os: windows-latest
            binary: ${{ needs.conf.outputs.name }}.exe
            artifact: ${{ needs.conf.outputs.windows_artifact }}
            strip: false
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      
      - name: Build
        run: cargo build --release --locked --verbose

      - name: Strip symbol table to reduce binary size
        run: strip target/release/${{ matrix.binary }}
        if: ${{ matrix.strip }}

      - name: Compress binary
        run: tar -cv -f ${{ matrix.artifact }} -C target/release ${{ matrix.binary }}

      - name: Upload compressed binary as artifact
        uses: actions/upload-artifact@v2
        with:
          name: ${{ matrix.artifact }}
          path: ${{ matrix.artifact }}

  # Creates a new release on GitHub using the built artifacts and release notes
  # generated from CHANGELOG.md
  release:
    name: Release
    runs-on: ubuntu-latest
    needs:
      - conf
      - build
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Download Linux artifact
        uses: actions/download-artifact@v2
        with:
          name: ${{ needs.conf.outputs.linux_artifact }}

      - name: Download macOS artifact
        uses: actions/download-artifact@v2
        with:
          name: ${{ needs.conf.outputs.macos_artifact }}

      - name: Download Windows artifact
        uses: actions/download-artifact@v2
        with:
          name: ${{ needs.conf.outputs.windows_artifact }}

      - name: Prepare release notes
        run: ./scripts/gen-release-notes.sh ${{ needs.conf.outputs.version }} > release_notes.txt

      - name: Create GitHub release
        uses: softprops/action-gh-release@v1
        if: startsWith(github.ref, 'refs/tags/')
        with:
          body_path: release_notes.txt
          files: |
            ${{ needs.conf.outputs.linux_artifact }}
            ${{ needs.conf.outputs.macos_artifact }}
            ${{ needs.conf.outputs.windows_artifact }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
